// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/daniel-vuky/gogento-configuration/db/sqlc (interfaces: Store)
//
// Generated by this command:
//
//	mockgen -destination db/mock/store.go -package mockdb github.com/daniel-vuky/gogento-configuration/db/sqlc Store
//

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	db "github.com/daniel-vuky/gogento-configuration/db/sqlc"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateConfig mocks base method.
func (m *MockStore) CreateConfig(arg0 context.Context, arg1 *db.CreateConfigParams) (db.CoreConfigDatum, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConfig", arg0, arg1)
	ret0, _ := ret[0].(db.CoreConfigDatum)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConfig indicates an expected call of CreateConfig.
func (mr *MockStoreMockRecorder) CreateConfig(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfig", reflect.TypeOf((*MockStore)(nil).CreateConfig), arg0, arg1)
}

// DeleteConfig mocks base method.
func (m *MockStore) DeleteConfig(arg0 context.Context, arg1 string) (db.CoreConfigDatum, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConfig", arg0, arg1)
	ret0, _ := ret[0].(db.CoreConfigDatum)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConfig indicates an expected call of DeleteConfig.
func (mr *MockStoreMockRecorder) DeleteConfig(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfig", reflect.TypeOf((*MockStore)(nil).DeleteConfig), arg0, arg1)
}

// GetConfig mocks base method.
func (m *MockStore) GetConfig(arg0 context.Context, arg1 string) (db.CoreConfigDatum, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig", arg0, arg1)
	ret0, _ := ret[0].(db.CoreConfigDatum)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockStoreMockRecorder) GetConfig(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockStore)(nil).GetConfig), arg0, arg1)
}

// UpdateConfig mocks base method.
func (m *MockStore) UpdateConfig(arg0 context.Context, arg1 *db.UpdateConfigParams) (db.CoreConfigDatum, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConfig", arg0, arg1)
	ret0, _ := ret[0].(db.CoreConfigDatum)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConfig indicates an expected call of UpdateConfig.
func (mr *MockStoreMockRecorder) UpdateConfig(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfig", reflect.TypeOf((*MockStore)(nil).UpdateConfig), arg0, arg1)
}
